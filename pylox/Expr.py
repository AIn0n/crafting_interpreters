# code generated by pylox/tools/generate_ast.py
from visitor_node import Visitor_node
import abc


class Expr(Visitor_node):
    pass


class VisitorExpr(abc.ABC):
    @abc.abstractmethod
    def visitAssign(self, expr):
        pass

    @abc.abstractmethod
    def visitBinary(self, expr):
        pass

    @abc.abstractmethod
    def visitCall(self, expr):
        pass

    @abc.abstractmethod
    def visitGet(self, expr):
        pass

    @abc.abstractmethod
    def visitGrouping(self, expr):
        pass

    @abc.abstractmethod
    def visitLiteral(self, expr):
        pass

    @abc.abstractmethod
    def visitLogical(self, expr):
        pass

    @abc.abstractmethod
    def visitUnary(self, expr):
        pass

    @abc.abstractmethod
    def visitVariable(self, expr):
        pass


class Assign(Expr):
    def __init__(self, name, value):
        self.name = name
        self.value = value


class Binary(Expr):
    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right


class Call(Expr):
    def __init__(self, callee, paren, arguments):
        self.callee = callee
        self.paren = paren
        self.arguments = arguments


class Get(Expr):
    def __init__(self, object, name):
        self.object = object
        self.name = name


class Grouping(Expr):
    def __init__(self, expression):
        self.expression = expression


class Literal(Expr):
    def __init__(self, value):
        self.value = value


class Logical(Expr):
    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right


class Unary(Expr):
    def __init__(self, operator, right):
        self.operator = operator
        self.right = right


class Variable(Expr):
    def __init__(self, name):
        self.name = name
