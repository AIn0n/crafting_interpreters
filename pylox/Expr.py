# code generated by pylox/tools/generate_ast.py
class Expr:
    def visit(self, visitor):
        pass


class Visitor:
    def visitBinary(self, expr):
        pass

    def visitGrouping(self, expr):
        pass

    def visitLiteral(self, expr):
        pass

    def visitUnary(self, expr):
        pass


class Binary(Expr):
    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right

    def visit(self, visitor):
        return visitor.visitBinary(self)


class Grouping(Expr):
    def __init__(self, expression):
        self.expression = expression

    def visit(self, visitor):
        return visitor.visitGrouping(self)


class Literal(Expr):
    def __init__(self, value):
        self.value = value

    def visit(self, visitor):
        return visitor.visitLiteral(self)


class Unary(Expr):
    def __init__(self, operator, right):
        self.operator = operator
        self.right = right

    def visit(self, visitor):
        return visitor.visitUnary(self)
