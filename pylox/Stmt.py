# code generated by pylox/tools/generate_ast.py
from visitor_node import Visitor_node
import abc


class Stmt(Visitor_node):
    pass


class VisitorStmt(abc.ABC):
    @abc.abstractmethod
    def visitBlock(self, stmt):
        pass

    @abc.abstractmethod
    def visitExpression(self, stmt):
        pass

    @abc.abstractmethod
    def visitFunction(self, stmt):
        pass

    @abc.abstractmethod
    def visitIf(self, stmt):
        pass

    @abc.abstractmethod
    def visitPrint(self, stmt):
        pass

    @abc.abstractmethod
    def visitReturn(self, stmt):
        pass

    @abc.abstractmethod
    def visitVar(self, stmt):
        pass

    @abc.abstractmethod
    def visitWhile(self, stmt):
        pass


class Block(Stmt):
    def __init__(self, statements):
        self.statements = statements


class Expression(Stmt):
    def __init__(self, expression):
        self.expression = expression


class Function(Stmt):
    def __init__(self, name, params, body):
        self.name = name
        self.params = params
        self.body = body


class If(Stmt):
    def __init__(self, condition, then_branch, else_branch):
        self.condition = condition
        self.then_branch = then_branch
        self.else_branch = else_branch


class Print(Stmt):
    def __init__(self, expression):
        self.expression = expression


class Return(Stmt):
    def __init__(self, keyword, value):
        self.keyword = keyword
        self.value = value


class Var(Stmt):
    def __init__(self, name, initializer):
        self.name = name
        self.initializer = initializer


class While(Stmt):
    def __init__(self, condition, body):
        self.condition = condition
        self.body = body
